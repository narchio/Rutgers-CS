I attempted the extra credit lru policy for this project. 

I utalized two data structures: a block structure and a cachecounter structure. The block structure was designed to contain a valid bit, a rank (for fifo), an lru (for lru) and most importantly, an unsigned long long int tag for each entry. I eliminated the need for an intermediary set structure by creating a block double pointer (essentially modelled after a matrix). This was implemented as each row would be a certain set, and each column at that row would correspond to a block. An entry with 0's in all its fields was considered to be removed or empty. The cachecounter consisted of the 8 different counters that we needed to keep track of (no-prefetch and prefetch) and was used throughout the methods to increment them to the correct values. 

The reason we implement prefetch in many cases over no-prefetch is becasue memory is sequential, and the chances of us accessing another adjacent block of memory to the current is fairly high. Thus, prefetching is used to grab the block before it is needed, so that down the line, it will be in the cache and will not have to pay the expensive toll of accessing memory again. Ultimately, I found that there were more hits with the prefetch method and less memory reads in most cases becasue the prefetched items would already be in the cache, allowing for more efficient access to them. 
